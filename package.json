{
  "title": "Bevry's Coda Packs",
  "name": "@bevry/coda-packs",
  "version": "0.1.0",
  "private": true,
  "description": "no description was provided",
  "homepage": "https://github.com/bevry/coda-packs",
  "license": "Artistic-2.0",
  "keywords": [
    "",
    "es2017",
    "typed",
    "types",
    "typescript"
  ],
  "badges": {
    "list": [
      "githubworkflow",
      "---",
      "githubsponsors",
      "thanksdev",
      "patreon",
      "flattr",
      "liberapay",
      "buymeacoffee",
      "opencollective",
      "crypto",
      "paypal",
      "wishlist"
    ],
    "config": {
      "githubWorkflow": "bevry",
      "githubSponsorsUsername": "balupton",
      "thanksdevGithubUsername": "balupton",
      "buymeacoffeeUsername": "balupton",
      "cryptoURL": "https://bevry.me/crypto",
      "flattrUsername": "balupton",
      "liberapayUsername": "bevry",
      "opencollectiveUsername": "bevry",
      "patreonUsername": "bevry",
      "paypalURL": "https://bevry.me/paypal",
      "wishlistURL": "https://bevry.me/wishlist",
      "githubUsername": "bevry",
      "githubRepository": "coda-packs",
      "githubSlug": "bevry/coda-packs",
      "npmPackageName": "@bevry/coda-packs"
    }
  },
  "funding": "https://bevry.me/fund",
  "author": "2022+ Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)",
  "maintainers": [
    "Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)"
  ],
  "contributors": [
    "Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)"
  ],
  "bugs": {
    "url": "https://github.com/bevry/coda-packs/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bevry/coda-packs.git"
  },
  "engines": {
    "node": ">=18"
  },
  "editions": [
    {
      "description": "TypeScript source code with Import for modules",
      "directory": "source",
      "entry": "index.ts",
      "tags": [
        "source",
        "typescript",
        "import"
      ],
      "engines": false
    },
    {
      "description": "TypeScript compiled against ES2017 for Node.js with Require for modules",
      "directory": "edition-es2017",
      "entry": "index.js",
      "tags": [
        "compiled",
        "javascript",
        "es2017",
        "require"
      ],
      "engines": {
        "node": "18 || 20 || 21",
        "browsers": false
      }
    },
    {
      "description": "TypeScript compiled against ES2017 for Node.js with Import for modules",
      "directory": "edition-es2017-esm",
      "entry": "index.js",
      "tags": [
        "compiled",
        "javascript",
        "es2017",
        "import"
      ],
      "engines": {
        "node": "18 || 20 || 21",
        "browsers": false
      }
    }
  ],
  "types": "./compiled-types/",
  "type": "module",
  "main": "edition-es2017/index.js",
  "exports": {
    "node": {
      "import": "./edition-es2017-esm/index.js",
      "require": "./edition-es2017/index.js"
    }
  },
  "dependencies": {
    "@codahq/packs-sdk": "^1.7.0",
    "twitter-api-sdk": "^1.2.1"
  },
  "devDependencies": {
    "@types/node": "^20.8.10",
    "@typescript-eslint/eslint-plugin": "^6.9.1",
    "@typescript-eslint/parser": "^6.9.1",
    "assert-helpers": "^11.10.0",
    "eslint": "^8.52.0",
    "eslint-config-bevry": "^3.27.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "kava": "^5.15.0",
    "prettier": "^3.0.3",
    "projectz": "^2.23.0",
    "surge": "^0.23.1",
    "typedoc": "^0.25.3",
    "typescript": "5.2.2"
  },
  "scripts": {
    "our:clean": "rm -Rf ./docs ./edition* ./es2015 ./es5 ./out ./.next",
    "our:compile": "npm run our:compile:edition-es2017 && npm run our:compile:edition-es2017-esm && npm run our:compile:types",
    "our:compile:edition-es2017": "tsc --module commonjs --target ES2017 --outDir ./edition-es2017 --project tsconfig.json && ( test ! -d edition-es2017/source || ( mv edition-es2017/source edition-temp && rm -Rf edition-es2017 && mv edition-temp edition-es2017 ) ) && printf '%s' '{\"type\": \"commonjs\"}' > edition-es2017/package.json",
    "our:compile:edition-es2017-esm": "tsc --module ESNext --target ES2017 --outDir ./edition-es2017-esm --project tsconfig.json && ( test ! -d edition-es2017-esm/source || ( mv edition-es2017-esm/source edition-temp && rm -Rf edition-es2017-esm && mv edition-temp edition-es2017-esm ) ) && printf '%s' '{\"type\": \"module\"}' > edition-es2017-esm/package.json",
    "our:compile:types": "tsc --project tsconfig.json --emitDeclarationOnly --declaration --declarationMap --declarationDir ./compiled-types && ( test ! -d compiled-types/source || ( mv compiled-types/source edition-temp && rm -Rf compiled-types && mv edition-temp compiled-types ) )",
    "our:deploy": "printf '%s\n' 'no need for this project'",
    "our:meta": "npm run our:meta:docs && npm run our:meta:projectz",
    "our:meta:docs": "npm run our:meta:docs:typedoc",
    "our:meta:docs:typedoc": "rm -Rf ./docs && typedoc --exclude '**/+(*test*|node_modules)' --excludeExternals --out ./docs ./source",
    "our:meta:projectz": "projectz compile",
    "our:release": "npm run our:release:push",
    "our:release:prepare": "npm run our:clean && npm run our:compile && npm run our:test && npm run our:meta",
    "our:release:push": "git push origin && git push origin --tags",
    "our:setup": "npm run our:setup:install",
    "our:setup:install": "npm install",
    "our:test": "npm run our:verify && npm test",
    "our:verify": "npm run our:verify:eslint && npm run our:verify:prettier",
    "our:verify:eslint": "eslint --fix --ignore-pattern '**/*.d.ts' --ignore-pattern '**/vendor/' --ignore-pattern '**/node_modules/' --ext .mjs,.js,.jsx,.ts,.tsx ./source",
    "our:verify:prettier": "prettier --write .",
    "clean": "bash -ic 'rm -Rf packs/*/{.coda.json,.coda-credentials.json,.gitignore,tsconfig.json,package.json,package-lock.json,node_modules}'",
    "test": "node ./edition-es2017/test.js"
  },
  "eslintConfig": {
    "extends": [
      "bevry"
    ],
    "rules": {
      "require-atomic-updates": 0,
      "no-console": 0,
      "no-use-before-define": 1,
      "valid-jsdoc": 0
    }
  },
  "prettier": {
    "semi": false,
    "singleQuote": true
  }
}